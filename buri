#!/usr/bin/python

import argparse
import os
import logging


# Implementations of the subcommands the subparsers specify

def devbox(args):
    logging.info('Pushing a devbox to: %s' % args.host)

def bar(args):
    print 'in bar: %s' % args.thing2

# ARG PARSER STUFF BELOW HERE

class _HelpAction(argparse._HelpAction):
    def __call__(self, parser, namespace, values, option_string=None):
        parser.print_help()
	print
        # retrieve subparsers from parser
        subparsers_actions = [
            action for action in parser._actions
            if isinstance(action, argparse._SubParsersAction)]
        # there will probably only be one subparser_action,
        # but better save than sorry
        for subparsers_action in subparsers_actions:
            # get all subparsers and print help
            for choice, subparser in subparsers_action.choices.items():
                print("Command: '{}'".format(choice))
                print(subparser.format_help())

        parser.exit()

parser = argparse.ArgumentParser(prog='buri', description='Buri system/image builder front-end', add_help=False)
parser.add_argument('--help', action=_HelpAction, help='detailed help')  # add custom help
parser.add_argument('--loglevel', metavar='', type=str, default='warn', help='Set the log level')  # add custom help

subparser = parser.add_subparsers(help='sub commands')

# All-in-one devbox environment
parser_devbox = subparser.add_parser('devbox', help="Install all-in-one system to a host for development use", add_help=False)
parser_devbox.add_argument('host', metavar='<ip|hostname>', type=str, help='IP or hostname to install to')
parser_devbox.set_defaults(func=devbox)

# bar
parser_bar = subparser.add_parser('bar', help="bar group", add_help=False)
parser_bar.add_argument('thing2', metavar='param', type=str, help='param for bar')
parser_bar.set_defaults(func=bar)

args = parser.parse_args()
numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % loglevel)
logging.basicConfig(level=numeric_level)
logging.warn("LOGLEVEL: %s, %s", args.loglevel, numeric_level)

args.BURI_BASE = os.path.dirname(os.path.realpath(__file__))
logging.info("PATH: %s" % args.BURI_BASE)
args.func(args)

