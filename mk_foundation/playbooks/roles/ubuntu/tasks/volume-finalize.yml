---
# Tear down and snapshot a volume with base OS + changes

- name: Unmount /proc filesystem from chroot
  command: 'chroot /mnt/{{ distro_image_basename }} unmount /proc'

- name: Unmount /dev filesystem from chroot
  command: 'unmount /mnt/{{ distro_image_basename }}/dev'

- name: Re-enable rc.d before snapshot
  file:
    path: '/mnt/{{ distro_image_basename }}/usr/sbin/policy-rc.d'
    state: absent

- name: Unmount EBS volume for chroot
  command: 'unmount /mnt/{{ distro_image_basename }}'

# This is ugly, but ec2_vol does not support detachment oddly...

- name: Detatch working volume for snapshotting
  command: 'ec2-detach-volume --region {{ ansible_ec2_placement_region }} "{{ ami_ebs_volume_id }}"'

- name: Waiting for completion of volume detatch
  command: 'ec2-describe-volumes --region {{ ansible_ec2_placement_region }} "{{ ami_ebs_volume_id }}"'
  register: result
  until: result.stdout.find("ATTACHMENT") == -1
  retries: 10
  delay: 3

# Not using snapshot module from ansible, as supporting 1.4.4 is needed
- name: Create snapshot from EBS volume
  command: 'ec2-create-snapshot --region {{ ansible_ec2_placement_region }} --description "{{ ami_name }}" "{{ ami_ebs_volume_id }}"'
  register: snap

- name: Saving Snapshot ID as a fact for later use
  set_fact: 
    ami_snapshot_id: '{{ item.split("\t")[1] }}'
  with_items: snap.stdout

- name: Waiting for completion of snapshot
  command: 'ec2-describe-snapshots --region {{ ansible_ec2_placement_region }} "{{ ami_snapshot_id }}"'
  register: result
  until: result.stdout.find("pending") == -1
  retries: 15
  delay: 3

- name: Find correct AKI ID for PV registration
  shell: 'wget -qO- {{ distro_image_query }} | egrep "ebs.{{ distro_archname }}.{{ ansible_ec2_placement_region }}.*paravirtual"'
  register: aki

- name: Saving AKI ID as a fact for later use
  set_fact: 
    ami_aki_id: '{{ item.split("\t")[8] }}'
  with_items: aki.stdout

- name: Registering PVM AMI to snapshot
  command: 'ec2-register --name "{{ ami_name }}-pvm" --description "{{ ami_description }}" --architecture "{{ ansible_architecture }}" --kernel "{{ ami_aki_id }}" --root-device-name /dev/sda1 --block-device-mapping /dev/sda={{ ami_snapshot_id }}::true --block-device-mapping {{ ami_ephemeral }}=ephemeral0 --region {{ ansible_ec2_placement_region }}'
  register: amipvm

- name: Saving PVM AMI ID as a fact for later use
  set_fact: 
    ami_id_pvm: '{{ item.split("\t")[1] }}'
  with_items: amipvm.stdout

- name: Registering HVM AMI to snapshot
  command: 'ec2-register --name "{{ ami_name }}-hvm" --description "{{ ami_description }}" --architecture "{{ ansible_architecture }}" --root-device-name /dev/sda1 --block-device-mapping /dev/sda1={{ ami_snapshot_id}}::true --block-device-mapping {{ ami_ephemeral }}=ephemeral0 --region {{ ansible_ec2_placement_region }} --virtualization-type hvm'
  register: amihvm

- name: Saving HVM AMI ID as a fact for later use
  set_fact: 
    ami_id_hvm: '{{ item.split("\t")[1] }}'
  with_items: amihvm.stdout

- name: Delete EBS working volume
  command: 'ec2-delete-volume --region {{ ansible_ec2_placement_region }} "{{ ami_ebs_volume_id }}"'

- name: Tagging snapshot
  command: 'ec2-create-tags --region {{ ansible_ec2_placement_region }} {{ ami_snapshot_id }} --tag Name="{{ ami_basename }} AMI"'

- name: Tagging PVM AMI
  command: 'ec2-create-tags --region {{ ansible_ec2_placement_region }} {{ ami_id_pvm }} --tag Name="{{ ami_basename }} PVM" --tag creation_time="{{ ami.timestamp }}"'

- name: Tagging HVM AMI
  command: 'ec2-create-tags --region {{ ansible_ec2_placement_region }} {{ ami_id_hvm }} --tag Name="{{ ami_basename }} HVM" --tag creation_time="{{ ami.timestamp }}"'

# output details of the run
- debug: 'name:            {{ ami_name}}'
- debug: 'description:     {{ ami_description }}'
- debug: 'os:              Ubuntu {{ distro_release }} {{ distro_version }}'
- debug: 'architecture:    {{ ansible_architecture }} ({{ distro_arch_name }})'
- debug: 'region:          {{ ansible_ec2_placement_region }} ({{ ansible_ec2_placement_availability_zone }})'
- debug: 'PVM AMI ID:      {{ ami_id_pvm }}'
- debug: 'HVM AMI ID:      {{ ami_id_hvm }}'
- debug: 'AKI ID:          {{ ami_aki_id }}'
- debug: 'EBS volume ID:   {{ ami_ebs_volume_id }} (deleted)'
- debug: 'EBS snapshot ID: {{ ami_snapshot_id }}'


