---
# Setup a volume with base OS
# main.yml must have a when: ansible_distribution == 'Ubuntu' on including this

- name: Fetch distribution hard disk image
  get_url:
    url: '{{ distro.image.urlhd00 }} '
    dest: '/mnt/{{ distro.image.basename }}.img'
    owner: root
    group: root
    mode: 0444

- name: Gather EC2 facts on build instance
  action: ec2_facts

- name: Attacting new EBS volume to instance
  action:
    module: ec2_vol
    instance: '{{ ansible_ec2_instance_id }}'
    region: '{{ ansible_ec2_placement_region }}'
    zone: '{{ ansible_ec2_placement_availability_zone }}'
    volume_size: '{{ ami.root_size }}'
    device_name: '{{ ami.device_aws }}'
    register: ec2_vol

- name: Saving Volume ID as a fact for later use
  set_fact: 
    ami_ebs_volume_id: '{{ item.id }}'
  with_items: ec2_vol.results

- name: Writing disk image to volume
  command: 'qemu-img convert -O host_device /mnt/{{ distro.image.basename }}.img {{ ami.device }}'

- name: Scanning EBS volume for new partition table
  command: 'partprobe {{ ami.device }}'

# Don't use ansible module "mount", as this is a transient thing
- name: Creating mount point for EBS volume
  file:
    path: '/mnt/{{ distro.image.basename }}'
    state: directory
    owner: root
    group: root
    mode: 0444

- name: Mount EBS volume for chroot
  command: 'mount {{ ami.device }} /mnt/{{ distro.image.basename }}'

- name: Mount /proc filesystem into chroot
  command: 'chroot /mnt/{{ distro.image.basename }} mount -t proc none /proc'

- name: Mount (bind) /dev filesystem into chroot
  command: 'mount -o bind /dev /mnt/{{ distro.image.basename }}/dev'

- name: Add resolv.conf to chroot environment
  copy:
    src: /etc/resolv.conf
    dest: '/mnt/{{ distro.image.basename }}/etc/resolv.conf'

- name: Disable rc.d for rest of the process.
  copy:
    src: policy-rc.d
    dest: '/mnt/{{ distro.image.basename }}/usr/sbin/policy-rc.d'
    owner: root
    group: root
    mode: 0755


