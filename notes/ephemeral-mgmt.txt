
This is a brainstorm around how to handle ephemeral disks, and filesystem structure an AMI may need.

There are several things to consider, which have touchpoints/dependencies on eachother.

1) We need a means to create structures apps need on the ephemeral file systems, as the simplest case, some folders on the ephemeral disk

2) We get our first ephemeral disk mounted/formatted for "free", but all others are left, and require mounting/formatting, or something even more elaborate

3) One approach is to stripe all ephemeral disks into one, put it on /mnt, and build structure from there.

4) It is desirable to have more flexibility than #3, as it may be indicated to split volumes (and thus IO queues) for some configurations

5) We should probably have everything occur in /mnt, just because...



Possible flow:

1) Detect if run already, if so, exit

2) Unmount anything auto-mounted

3) Find whole set of ephemeral disks available

4) Reserve the first N of that set per configuration

5) If only one disk remaining

  a) Format remaining disk, mount as /mnt

   ELSE

  b) Stripe remaining devices into md0 volume, format, mount as /mnt

6) For the count of requested reserved spindles

  a) create folder/mountpoint

7) For each of the reserved ephemerals

  a) format
  b) mount as /mnt/ephemeralXX

8) Modify fstab

9) Record change has been made


CONSISTENCY
-----------

One of the primary things we need to consider, is that we need to see uniformity of filesystem structure regardless of what the specific ephemeral availability is, even faking things where needed.

POSSIBLE CONFIGS:

- 0 disks (t1.micro only)
  - just exit
- 1 disk (several types)
  - will already be formatted, mounted on /mnt
  - just exit
- 2 disks (several types)
  - if no reservations, unmount, add both to raid
  - if 1 reservation, just format/mount the 2nd drive
- 4,8,24 disks (several types)
  - general reservation logic should apply



