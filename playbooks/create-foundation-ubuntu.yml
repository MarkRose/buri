---
# Playbook to create a foundation snapshot/AMI from ubuntu's source images
- name: Ubuntu Foundation Create
  hosts: localhost
  connection: local
  sudo: True
  #vars:
  vars_files:
    - vars/ami.yml
    - vars/install/Ubuntu.yml
    - [ "local/site.yml", "vars/site.defaults.yml" ]
  tasks:
    - include: tasks/ec2_get_facts.yml
    - include: tasks/ec2_get_iam_info.yml
    - include: tasks/ec2_ami_find_aki_ubuntu.yml
    - include: tasks/ec2_create_vol_and_attach.yml
      vars:
        ebs_size: '{{ ami_root_size }}'
        ebs_device_id: '{{ ami_device }}'
    - include: tasks/image_write_qcow_from_url.yml
      vars:
        image_url: '{{ distro_image_url }}'
        image_path: '{{ distro_image_path }}'
        image_device: '{{ ami_device }}'
    - include: tasks/filesystem-grow.yml
      when: ami_root_resize
    - include: tasks/chroot_mount_and_setup.yml
      vars:
        chroot_mountpoint: '{{ image_mount }}'
        chroot_device: '{{ ami_device }}'
    - name: Register chroot target in ansible inventory
      add_host: hostname={{ image_mount }} groupname=chroots


- name: Provisioning role against chroot
  hosts: chroots
  connection: chroot
  user: root
  sudo: True
  vars:
    image_build: True
  vars_files:
    - 'vars/system/{{ ansible_distribution }}.yml'
    - [ "local/site.yml", "vars/site.defaults.yml" ]
  roles:
    - '{{ ami_role }}'

- name: Disconnect, snapshot, and register newly formed AMI
  hosts: localhost
  connection: local
  sudo: True
  #vars:
  vars_files:
    - vars/ami.yml
    - [ "local/site.yml", "vars/site.defaults.yml" ]
  tasks:
    - include: tasks/ec2_get_facts.yml
    - include: tasks/chroot_clean_and_unmount.yml
      vars:
        chroot_mountpoint: '{{ image_mount }}'
    - include: tasks/image_bundle_to_s3.yml
      when: ami_build_pvm_instance or ami_build_hvm_instance
    - include: tasks/ec2_ami_tag_s3_pvm.yml
      when: ami_build_pvm_instance
    - include: tasks/ec2_ami_tag_s3_hvm.yml
      when: ami_build_hvm_instance
    - include: tasks/ec2_detach_and_snapshot_vol.yml
      vars:
        # ebs_volume_id: (comes via stored fact)
        ebs_snap_desc: '{{ ami_description }}'
        ebs_tag_name: '{{ ami_name }}'
    - include: tasks/ec2_ami_tag_ebs_pvm.yml
      when: ami_build_pvm_ebs
    - include: tasks/ec2_ami_tag_ebs_hvm.yml
      when: ami_build_hvm_ebs
    - include: tasks/report.yml

