description "Setup ephemeral and EBS volumes, and create directories and symlinks"

start on stopped cloud-config
console log
task
script
    function mylog {
        logger -s -t buri -p syslog.info "$1"
    }

    configured_file=/var/local/buri_ephemeral
    if [ -e $configured_file ]; then
        mylog "Buri devices already configured. Exiting"
        exit 0
    fi

    metadata_url_base="http://169.254.169.254/2015-10-20"

    drive_scheme='xvd'

    # drive detection and counting

    ephemeral_devices=""
    ebs_devices=""
    ephemeral_count=0
    ebs_count=0

    mylog "Fetching block device mapping..."

    block_devices=$(curl --silent $metadata_url_base/meta-data/block-device-mapping/ | grep ephemeral)

    ephemerals=$(echo "$block_devices" | grep ephemeral)
    ebses=$(echo "$block_devices" | grep ebs)

    for e in $ephemerals; do
        mylog "Probing $e .."
        device_name=$(curl --silent $metadata_url_base/meta-data/block-device-mapping/$e)
        device_name=$(echo $device_name | sed "s/sd/$drive_scheme/")
        device_path="/dev/$device_name"
        if [ -b $device_path ]; then
            ephemeral_devices="$ephemeral_devices $device_path"
            ephemeral_count=$(($ephemeral_count+1))
        fi
    done

    for e in $ebses; do
        mylog "Probing $e ..."
        device_name=$(curl --silent $metadata_url_base/meta-data/block-device-mapping/$e)
        device_name=$(echo $device_name | sed "s/sd/xvd/")
        device_path="/dev/$device_name"
        if [ -b $device_path ]; then
            ebs_devices="$ebs_devices $device_path"
            ebs_count=$(($ebs_count+1))
        fi
    done

    read -r -a ephemeral_array <<< $ephemeral_devices
    read -r -a ebs_array <<< $ebs_devices

    # three cases:
    # * we have both ephemeral and ebs, use combined map file.
    # * we have only ephemeral, use the ephemeral file
    # * we have only ebs, use the ebs file
    #
    # device map files have the following fields:
    # device_count mount_point raid_level devices symlinks
    #
    # device_count - takes the format of ephemeral# or ebs#.
    #              - is the count of the drives of that type.
    #              -  may be * for any count not listed
    # mount_point  - the mount point where a single drive or raid will be mounted
    # raid_level   - if more than one drive, the raid level. no sanity check.
    #              - if only one drive, no raid
    # devices      - the devices to be raided, e.g. 0,1,2 . Starting from 0.
    #              - use * for any remaining devices. * must be in the last line for the device type
    # symlinks     - the symlinks to create, colon and comma separated /symlink=/mntpt:user:group
    #
    # ephemeral example:
    # ephemeral1 /mnt1 0 0 /cass/commitlog=/mnt1/commitlog:jetty:jetty,/cass/data=/mnt1/data:jetty:jetty,/cass/saved_caches=/mnt1/saved_caches:jetty:jetty
    # ephemeral2 /mnt1 0 0 /cass/commitlog=/mnt1/commitlog:jetty:jetty
    # ephemeral2 /mnt2 0 1 /cass/data=/mnt2/data:jetty:jetty,/cass/saved_caches=/mnt2/saved_caches:jetty:jetty
    # ephemeral* /mnt1 0 0 /cass/commitlog=/mnt1/commitlog:jetty:jetty
    # ephemeral* /mnt2 0 * /cass/data=/mnt2/data:jetty:jetty,/cass/saved_caches=/mnt2/saved_caches:jetty:jetty
    #
    # ebs example:
    # ebs1 /mnt 0 0 /cass/commitlog=/mnt/commitlog:jetty:jetty,/cass/data=/mnt/data:jetty:jetty,/cass/saved_caches=/mnt/saved_caches:jetty:jetty
    # ebs2 /mnt 0 0 /cass/commitlog=/mnt/commitlog:jetty:jetty
    # ebs2 /mnt2 0 1 /cass/data=/mnt2/data:jetty:jetty,/cass/saved_caches=/mnt2/saved_caches:jetty:jetty
    # ebs* /mnt 0 0 /cass/commitlog=/mnt/commitlog:jetty:jetty
    # ebs* /mnt2 0 * /cass/data=/mnt2/data:jetty:jetty,/cass/saved_caches=/mnt2/saved_caches:jetty:jetty
    #
    # both example:
    # ephemeral* /mnt1 0 * /cass/commitlog=/mnt1/commitlog:jetty:jetty
    # ebs* /mnt2 0 * /cass/data=/mnt2/data:jetty:jetty,/cass/saved_caches=/mnt2/saved_caches:jetty:jetty

    if [ $ephemeral_count -gt 0 ] && [ $ebs_count -gt 0 ] ; then
        device_map=/etc/buri-device-map-both
    elif [ $ephemeral_count -gt 0 ] ; then
        device_map=/etc/buri-device-map-ephemeral
    elif [ $ebs_count -gt 0 ] ; then
        device_map=/etc/buri-device-map-ebs
    else
        device_map='/dev/null'
    fi

    # if the path isn't a file, we're done
    if [ ! -f $device_map ] ; then
        logger -s "No buri device map file found. Exiting."
        touch $configured_file
        exit 0;
    fi

    function make_filesystem {
        device_path=$1
        mount_point=$2

        mylog "Formatting $device_path"
        mkfs -t xfs ${device_path}
        echo "${device_path} $mount_point xfs defaults 0 0" >> /etc/fstab
        mylog "Mounting $device_path"
        mount $mount_point
    }

    function make_raid {
        device_path=$1
        raid_level=$2
        device_count=$3
        devices=$4

        # make a list of raid devices
        raid_devices=""
        IFS="," while read -r device_number ; do
            if [ $device_number = "*" ] ; then
                raid_devices="$raid_devices ${device_array[@]}"
                device_array=()
            else
                raid_devices="$raid_devices ${device_array[$device_number]}"
                device_array[$device_number]=""
            fi
        done <<< "$devices"

        mylog "Making RAID $device_path level $raid_level with devices $raid_devices"
        mdadm --create $device_path --level=$raid_level --raid-devices=$device_count $raid_devices
        echo DEVICE $raid_devices | tee -a /etc/mdadm/mdadm.conf
    }

    # for each symbolic link, make the target directory and link it
    function make_symlinks {
        symlinks=$1

        mylog "Making directories, setting ownership, and linking: $symlinks"
        IFS="," read -r -a symlink_array <<< $symlinks
        IFS=":" while read -r symlink user group ; do
            IFS="=" read -r src target <<< $symlink
            mkdir -p target
            ln -s target src
            chown $user:$group $target
        done <<< "$symlink_array"
    }

    function configure_disks {
        lines=$1

        while read -r line; do

            read -r dummy mount_point raid_level devices symlinks <<< $line

            # make the mount point
            mkdir -p $mount_point

            # make the array of devices
            IFS="," read -r -a device_array <<< $devices
            device_count=${#device_array[@]}

            if [ $device_count = 1 ] ; then
                make_filesystem $device_array[0] $mount_point
            elif [ $device_count -gt 1 ] ; then
                ((raid_count++))
                device_path=/dev/md$raid_count
                make_raid $device_path $raid_level $device_count $devices
                make_filesystem $device_path $mount_point
            fi

            make_symlinks $symlinks

        done <<< "$lines"
    }

    function find_relevant_lines {
        prefix=$2
        device_count=$3
        device_map=$4

        found_lines=$(grep $prefix$device_count $device_map)

        if [ "x$found_lines" = "x" ]; then
            found_lines=$(grep ${prefix}* $device_map)
        fi

        eval "$1='$found_lines'"
    }

    # first undo the default ubuntu mount and reload the partition table
    # we may need to set up the disk differently
    if [ $ephemeral_count -gt 0 ] ; then
        mylog "Removing default Ubuntu mounted /mnt"
        unmount /mnt || true
        read -r first_ephemeral dummy <<< "$ephemeral_devices"
        sed -i "#$first_ephemeral#d" /etc/fstab
        echo "o\nw\n" | fdisk $first_ephemeral
        partprobe || true
        # and zero the beginning of the drive so mdadm et al don't complain
        dd if=/dev/zero of=${first_ephemeral} bs=1M count=2
    fi

    raid_count=0
    mylog "Truncating /etc/mdadm/mdadm.conf"
    truncate /etc/mdadm/mdadm.conf

    relevant_ephemeral=''
    relevant_ebs=''
    find_relevant_lines relevant_ephemeral ephemeral $ephemeral_count $device_map
    find_relevant_lines relevant_ebs ebs $ebs_count $device_map

    configure_disks "$relevant_ephemeral"
    configure_disks "$relevant_ebs"

    # if we have raid, need to update mdadm.conf and rebuild the kernel image
    if [ $raid_count -gt 0 ] ; then
        mylog "Updating /etc/mdadm/mdadm.conf"
        mdadm --detail --scan | tee -a /etc/mdadm/mdadm.conf
        mylog "Updating initramfs"
        update-initramfs -u
    fi

    touch $configured_file

    mylog "Buri disk configuration complete."

end script