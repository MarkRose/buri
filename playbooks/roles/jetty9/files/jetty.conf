# jetty - java servlet container
#
# Jetty is a fast java servlet container
# Upstart script developed for jetty9
#
# Requires that /etc/default/jetty exists, and at a minimum contains:
#   JETTY_HOME
#   JETTY_BASE

# DO NOT use setuid/setgid, revoking privileges will be done by jetty itself

description     "Jetty servlet container"
author          "Joe Hohertz <jhohertz@gmail.com>"

start on stopped ephemeral-mkdirs
console output
expect daemon

pre-start script

  NO_START=0
  DEBUG=0
  [ ! -f /etc/default/jetty ] && { stop; exit 0; }
  . /etc/default/jetty

  if [ $NO_START -ne 0 ]; then
    echo "Not starting ${NAME} - NO_START=1"
    stop
    exit 0
  fi

  if [ -z "$JETTY_HOME" ]; then
    echo "** ERROR: JETTY_HOME not set" 
    stop
    exit 0
  fi

  if [ -z "$JETTY_BASE" ]; then
    echo "** ERROR: JETTY_BASE not set" 
    stop
    exit 0
  fi

  if [ ! -r "$JETTY_HOME/start.jar" ]
  then
    echo "** ERROR: Oops! Jetty doesn't appear to be installed in $JETTY_HOME"
    echo "** ERROR:  $JETTY_HOME/start.jar is not readable!"
    stop
    exit 0
  fi

  if [ -z "$JETTY_CONF" ]
  then
    if [ -f "$JETTY_BASE/etc/jetty.conf" ]
    then
      JETTY_CONF=$JETTY_BASE/etc/jetty.conf
    elif [ -f "$JETTY_HOME/etc/jetty.conf" ]
    then
      JETTY_CONF=$JETTY_HOME/etc/jetty.conf
    fi
  fi

  TMPDIR=${TMPDIR:-/tmp}

  ##################################################
  # Get the list of config.xml files from jetty.conf
  ##################################################
  if [ -f "$JETTY_CONF" ] && [ -r "$JETTY_CONF" ]
  then
    while read -r CONF
    do
      if expr "$CONF" : '#' >/dev/null ; then
        continue
      fi
      if [ -d "$CONF" ]
      then
        # assume it's a directory with configure.xml files
        # for example: /etc/jetty.d/
        # sort the files before adding them to the list of JETTY_ARGS
        for XMLFILE in "$CONF/"*.xml
        do
          if [ -r "$XMLFILE" ] && [ -f "$XMLFILE" ]
          then
            JETTY_ARGS="$JETTY_ARGS $XMLFILE"
          else
            echo "** WARNING: Cannot read '$XMLFILE' specified in '$JETTY_CONF'" 
          fi
        done
      else
        # assume it's a command line parameter (let start.jar deal with its validity)
        JETTY_ARGS="$JETTY_ARGS $CONF"
      fi
    done < "$JETTY_CONF"
  fi

  if [ -z "$JETTY_RUN" ]
  then
    JETTY_RUN=/var/run
  fi

  if [ -z "$JETTY_PID" ]
  then
    JETTY_PID="$JETTY_RUN/${NAME}.pid"
  fi

  if [ -z "$JETTY_STATE" ]
  then
    JETTY_STATE=$JETTY_BASE/${NAME}.state
  fi
  JAVA_OPTIONS="$JAVA_OPTIONS -Djetty.state=$JETTY_STATE"
  rm -f $JETTY_STATE

  if [ -z "$JAVA" ]
  then
    JAVA=$(which java)
  fi

  if [ -z "$JAVA" ]
  then
    echo "Cannot find a Java JDK. Please set either set JAVA or put java (>=1.5) in your PATH." 2>&2
    stop
    exit 0
  fi

  if [ -z "$JETTY_LOGS" ] && [ -d $JETTY_BASE/logs ]
  then
    JETTY_LOGS=$JETTY_BASE/logs
  fi
  if [ -z "$JETTY_LOGS" ] && [ -d $JETTY_HOME/logs ]
  then
    JETTY_LOGS=$JETTY_HOME/logs
  fi
  if [ "$JETTY_LOGS" ]
  then
    JAVA_OPTIONS="$JAVA_OPTIONS -Djetty.logs=$JETTY_LOGS"
  fi

  PATH_SEPARATOR=":"

  JAVA_OPTIONS="$JAVA_OPTIONS -Djetty.home=$JETTY_HOME -Djetty.base=$JETTY_BASE -Djava.io.tmpdir=$TMPDIR"

  JETTY_START=$JETTY_HOME/start.jar
  START_INI=$JETTY_BASE/start.ini
  if [ ! -f "$START_INI" ]
  then
    echo "Cannot find a start.ini in your JETTY_BASE directory: $JETTY_BASE" 2>&2
    stop
    exit 0
  fi

  RUN_ARGS="${JAVA_OPTIONS} -jar $JETTY_START ${JETTY_ARGS}"
  RUN_CMD="$JAVA ${RUN_ARGS}"

  if (( DEBUG ))
  then
    echo "START_INI      =  $START_INI"
    echo "JETTY_HOME     =  $JETTY_HOME"
    echo "JETTY_BASE     =  $JETTY_BASE"
    echo "JETTY_CONF     =  $JETTY_CONF"
    echo "JETTY_PID      =  $JETTY_PID"
    echo "JETTY_LOGS     =  $JETTY_LOGS"
    echo "JETTY_START    =  $JETTY_START"
    echo "JETTY_ARGS     =  ${JETTY_ARGS}"
    echo "JAVA_OPTIONS   =  ${JAVA_OPTIONS}"
    echo "JAVA           =  $JAVA"
    echo "RUN_CMD        =  ${RUN_CMD}"
  fi

end script

script
  echo -n "Starting Jetty: "
  start-stop-daemon -S -p"$JETTY_PID" -d"$JETTY_HOME" -b -m -a "$JAVA" -- "${RUN_ARGS}" start-log-file="logs/start.log"
end script

post-start script

  started()
  {
    # wait for 60s to see "STARTED" in PID file, needs jetty-started.xml as argument
    for T in 1 2 3 4 5 6 7 9 10 11 12 13 14 15
    do
      sleep 4
      [ -z "$(grep STARTED $1 2>/dev/null)" ] || return 0
      [ -z "$(grep STOPPED $1 2>/dev/null)" ] || return 1
      [ -z "$(grep FAILED $1 2>/dev/null)" ] || return 1
      local PID=$(cat "$2" 2>/dev/null) || return 1
      kill -0 "$PID" 2>/dev/null || return 1
      echo -n ". "
    done
    return 1;
  }

  if expr "${JETTY_ARGS}" : '.*jetty-started.xml.*' >/dev/null
  then
    if started "$JETTY_STATE" "$JETTY_PID"
    then
      echo "OK `date`"
    else
      echo "FAILED `date`"
    fi
  else
    echo "ok `date`"
  fi

end script

# Stubbed in case we need it
#
#pre-stop script
#
#  NO_START=0
#  DEBUG=0
#  [ ! -f /etc/default/jetty ] && { stop; exit 0; }
#  . /etc/default/jetty
#
#  if [ -z "$JETTY_RUN" ]
#  then
#    JETTY_RUN=/var/run
#  fi
#
#  if [ -z "$JETTY_PID" ]
#  then
#    JETTY_PID="$JETTY_RUN/${NAME}.pid"
#  fi
#
#  if [ -z "$JAVA" ]
#  then
#    JAVA=$(which java)
#  fi
#
#end script
#
#post-stop script
#
#  running()
#  {
#    local PID=$(cat "$1" 2>/dev/null) || return 1
#    kill -0 "$PID" 2>/dev/null
#  }
#
#  echo -n "Stopping Jetty: "
#
#  start-stop-daemon -K -p"$JETTY_PID" -d"$JETTY_HOME" -a "$JAVA" -s HUP
#
#  TIMEOUT=30
#  while running "$JETTY_PID"; do
#    if (( TIMEOUT-- == 0 )); then
#      start-stop-daemon -K -p"$JETTY_PID" -d"$JETTY_HOME" -a "$JAVA" -s KILL
#    fi
#
#    sleep 1
#  done
#
#  rm -f "$JETTY_PID"
#  echo OK
#
#end script
#

